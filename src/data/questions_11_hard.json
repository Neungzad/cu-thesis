[{"Id":8288664,"AcceptedAnswerId":8288680,"AnswerCount":3,"Body":"<p>I'm not sure whether or when it is useful (to improve performance) to dereference variables.</p>\n\n<pre><code>var x = a.b.c.d[some_key].f;\nwhile (loop) {\n    do_something_with(x);\n}\n</code></pre>\n\n<p>seems to be better than</p>\n\n<pre><code>while (loop) {\n    do_somthing_with(a.b.c.d[some_key].f);\n}\n</code></pre>\n\n<p>Is that needed or is this done automagically by smart JavaScript engines?</p>\n\n<p>But my actual question is whether I should do this, for example, in a library.</p>\n\n<pre><code>(function() {\n    var slice = Array.prototype.slice;\n\n    Function.prototype.x = function x() {\n        var args = slice.call(arguments, 0);\n        ...\n    };\n})();\n</code></pre>\n\n<p>or just</p>\n\n<pre><code>Function.prototype.x = function x() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    ...\n};\n</code></pre>\n\n<p>The engine can't improve this automatically because it doesn't know whether <code>Array.prototype.slice</code> might change during the run time.</p>\n\n<p>So: does creating a closure for creating the local reference to the slice function make the script faster? Or does the additional closure scope make it slower than accessing the property \"slice\" of the property \"prototype\" of Array?</p>\n","ClosedDate":null,"CommentCount":15,"CommunityOwnedDate":null,"CreationDate":"2011-11-27T20:09:53.283Z","FavoriteCount":3,"LastActivityDate":"2011-11-27T22:39:11.953Z","LastEditDate":"2011-11-27T22:39:11.953Z","LastEditorDisplayName":null,"LastEditorUserId":1048572,"OwnerUserId":1048572,"ParentId":0,"PostTypeId":1,"Score":11,"Tags":"<javascript><closures><dereference>","Title":"Is a closure for dereferencing variables useful?","ViewCount":1214},{"Id":19621074,"AcceptedAnswerId":19726918,"AnswerCount":7,"Body":"<p>I've created a very simple test case that creates a Backbone view, attaches a handler to an event, and instantiates a user-defined class. I believe that by clicking the \"Remove\" button in this sample, everything will be cleaned up and there should be no memory leaks.</p>\n\n<p>A jsfiddle for the code is here: <a href=\"http://jsfiddle.net/4QhR2/\">http://jsfiddle.net/4QhR2/</a></p>\n\n<pre><code>// scope everything to a function\nfunction main() {\n\n    function MyWrapper() {\n        this.element = null;\n    }\n    MyWrapper.prototype.set = function(elem) {\n        this.element = elem;\n    }\n    MyWrapper.prototype.get = function() {\n        return this.element;\n    }\n\n    var MyView = Backbone.View.extend({\n        tagName : \"div\",\n        id : \"view\",\n        events : {\n            \"click #button\" : \"onButton\",\n        },    \n        initialize : function(options) {        \n            // done for demo purposes only, should be using templates\n            this.html_text = \"&lt;input type='text' id='textbox' /&gt;&lt;button id='button'&gt;Remove&lt;/button&gt;\";        \n            this.listenTo(this,\"all\",function(){console.log(\"Event: \"+arguments[0]);});\n        },\n        render : function() {        \n            this.$el.html(this.html_text);\n\n            this.wrapper = new MyWrapper();\n            this.wrapper.set(this.$(\"#textbox\"));\n            this.wrapper.get().val(\"placeholder\");\n\n            return this;\n        },\n        onButton : function() {\n            // assume this gets .remove() called on subviews (if they existed)\n            this.trigger(\"cleanup\");\n            this.remove();\n        }\n    });\n\n    var view = new MyView();\n    $(\"#content\").append(view.render().el);\n}\n\nmain();\n</code></pre>\n\n<p>However, I am unclear how to use Google Chrome's profiler to verify that this is, in fact, the case. There are a gazillion things that show up on the heap profiler snapshot, and I have no idea how to decode what's good/bad. The tutorials I've seen on it so far either just tell me to \"use the snapshot profiler\" or give me a hugely detailed manifesto on how the entire profiler works. Is it possible to just use the profiler as a tool, or do I really have to understand how the whole thing was engineered?</p>\n\n<p><strong>EDIT:</strong> Tutorials like these:</p>\n\n<p><a href=\"https://docs.google.com/presentation/d/1wUVmf78gG-ra5aOxvTfYdiLkdGaR9OhXRnOlIcEmu2s/pub?start=false&amp;loop=false&amp;delayms=3000#slide=id.g14717ff3_0_23\">Gmail memory leak fixing</a></p>\n\n<p><a href=\"http://addyosmani.com/blog/taming-the-unicorn-easing-javascript-memory-profiling-in-devtools/\">Using DevTools</a></p>\n\n<p>Are representative of some of the stronger material out there, from what I've seen. However, beyond introducing the concept of the <em>3 Snapshot Technique</em>, I find they offer very little in terms of practical knowledge (for a beginner like me). The 'Using DevTools' tutorial doesn't work through a real example, so its vague and general conceptual description of things aren't overly helpful. As for the 'Gmail' example:</p>\n\n<blockquote>\n  <p><em><strong>So you found a leak. Now what?</em></strong></p>\n  \n  <ul>\n  <li><p>Examine the retaining path of leaked objects in the lower half of the Profiles panel</p></li>\n  <li><p>If the allocation site cannot be easily inferred (i.e. event listeners):</p></li>\n  <li><p>Instrument the constructor of the retaining object via the JS console to save the stack trace for allocations</p></li>\n  <li><p>Using Closure? Enable the appropriate existing flag (i.e. goog.events.Listener.ENABLE_MONITORING) to set the creationStack property during construction</p></li>\n  </ul>\n</blockquote>\n\n<p>I find myself more confused after reading that, not less. And, again, it's just telling me to <em>do</em> things, not <em>how</em> to do them. From my perspective, all of the information out there is either too vague or would only make sense to someone who already understood the process.</p>\n\n<p>Some of these more specific issues have been raised in <a href=\"http://stackoverflow.com/a/19726918/20578\">@Jonathan Naguin's answer</a> below.</p>\n","ClosedDate":null,"CommentCount":5,"CommunityOwnedDate":null,"CreationDate":"2013-10-27T17:28:06.036Z","FavoriteCount":70,"LastActivityDate":"2014-11-14T07:59:59.636Z","LastEditDate":"2013-11-06T10:36:38.980Z","LastEditorDisplayName":null,"LastEditorUserId":20578,"OwnerUserId":2153271,"ParentId":0,"PostTypeId":1,"Score":88,"Tags":"<javascript><google-chrome><backbone.js><memory-leaks>","Title":"Finding JavaScript memory leaks with Chrome","ViewCount":25281},{"Id":28101365,"AcceptedAnswerId":28101417,"AnswerCount":2,"Body":"<p>Say I have two Bacon.js properties.  One is child object - maybe just his name.  The other property object with the outfit he or she is wearing - pants color and shirt color.</p>\n\n<p>In my case I am using Angular-Bacon to create properties from AngularJS scope variables.</p>\n\n<p>How do I get a property that merges the two together?  I'd expect I could do something like the following (assuming I had Lodash available):</p>\n\n<pre><code>var outfit = $scope.$watchCollectionAsProperty('outfit'); // {shirt: 'blue', pants: 'green'}\nvar child = $scope.$watchCollectionAsProperty('child'); // {name: 'Jimmy'}\n\nvar clothedChild = outfit.map(function(it) {\n    return _.merge(it, child.value());\n});\n</code></pre>\n\n<p>This doesn't work, though.</p>\n\n<p>I'm super new to RFP and am trying to use Bacon in an Angular app, but I'm having a hard time wrapping my head around it.</p>\n\n<p>Any tips would be appreciated.</p>\n","ClosedDate":null,"CommentCount":0,"CommunityOwnedDate":null,"CreationDate":"2015-01-23T00:53:13.093Z","FavoriteCount":0,"LastActivityDate":"2015-04-29T23:37:50.403Z","LastEditDate":null,"LastEditorDisplayName":null,"LastEditorUserId":0,"OwnerUserId":1480995,"ParentId":0,"PostTypeId":1,"Score":0,"Tags":"<javascript><angularjs><functional-programming><reactive-programming><bacon.js>","Title":"How to merge two properties in Bacon.js","ViewCount":200},{"Id":28250680,"AcceptedAnswerId":28250697,"AnswerCount":8,"Body":"<p>I have restructured my code to promises, and built a wonderful long <strong>flat promise chain</strong>, consisting of multiple <code>.then()</code> callbacks. In the end I want to return some composite value, and need to access multiple <strong>intermediate promise results</strong>. However the resolution values from the middle of the sequence are not in scope in the last callback, how do I access them?</p>\n\n<pre><code>function getExample() {\n    return promiseA(…).then(function(resultA) {\n        // some processing\n        return promiseB(…);\n    }).then(function(resultB) {\n        // more processing\n        return // how do I gain access to resultA here?\n    });\n}\n</code></pre>\n","ClosedDate":null,"CommentCount":1,"CommunityOwnedDate":null,"CreationDate":"2015-01-31T10:41:29.780Z","FavoriteCount":60,"LastActivityDate":"2016-02-17T13:30:09.143Z","LastEditDate":"2015-06-19T09:28:31.483Z","LastEditorDisplayName":null,"LastEditorUserId":1048572,"OwnerUserId":1048572,"ParentId":0,"PostTypeId":1,"Score":123,"Tags":"<javascript><scope><promise><bluebird><es6-promise>","Title":"How do I access previous promise results in a .then() chain?","ViewCount":23344},{"Id":33014375,"AcceptedAnswerId":0,"AnswerCount":2,"Body":"<p>For a list of data I want to filter it using several predicates and then do an operation on each filter.</p>\n\n<p>Eg. if my data is:</p>\n\n<pre><code>var people = [\n    {name: 'Sachin',    profession: 'doctor',   cases: 12},\n    {name: 'Djokovic',  profession: 'lawyer',   cases: 14},\n    {name: 'Paes',      profession: 'doctor',   cases: 36},\n    {name: 'Jordan',    profession: 'lawyer',   cases: 78},\n    {name: 'Williams',  profession: 'doctor',   cases: 30},\n    {name: 'Nehwal',    profession: 'lawyer',   cases: 75}\n]\n</code></pre>\n\n<p>I want to convert it to:</p>\n\n<pre><code>var peopleWithoutCases = [\n    {name: 'Sachin',    profession: 'doctor',   patients:   12, cases: 12},\n    {name: 'Djokovic',  profession: 'lawyer',   courtcases: 14, cases: 14},\n    {name: 'Paes',      profession: 'doctor',   patients:   36, cases: 36},\n    {name: 'Jordan',    profession: 'lawyer',   courtcases: 78, cases: 78},\n    {name: 'Williams',  profession: 'doctor',   patients:   30, cases: 30},\n    {name: 'Nehwal',    profession: 'lawyer',   courtcases: 75, cases: 75}\n]\n</code></pre>\n\n<p>Is there an elegant functional approach like this??</p>\n\n<pre><code>    people\n    .filter (person =&gt; person.profession == 'doctor')\n    .map    (person =&gt; {\n                person.patients = person.cases\n                return person;\n            })\n    .filter (person =&gt; person.profession == 'lawyer')\n    .map    (person =&gt; {\n                person.courtcases = person.cases\n                return person;\n            })\n</code></pre>\n\n<p>Problem is the first <code>map</code> returns an array where there are only <code>doctor</code>s. So the second <code>filter</code> returns <code>[]</code>.</p>\n\n<p>I know I can do this:</p>\n\n<pre><code>_.union(\n    people\n        .filter (person =&gt; person.profession == 'doctor')\n        .map    (person =&gt; {\n                    person.patients = person.cases\n                    return person;\n                }),\n    people\n        .filter (person =&gt; person.profession == 'lawyer')\n        .map    (person =&gt; {\n                    person.courtcases = person.cases\n                    return person;\n                })\n)\n</code></pre>\n\n<p><em>Please correct me if I'm wrong</em> but, this takes a <em>multi pass</em> approach to the problem which is <em>inefficient</em> in my opinion as the array list grows and the number of predicates grow.</p>\n\n<p>Its quite easy to write this with an imperative approach. A single <code>for</code> loop with multiple <code>if</code> statements. Efficient but not <em>elegant</em> :)</p>\n\n<p>Please suggest the best approach using Functional javascript like Underscore, LoDash or the Excellent RamdaJS library. How's it done in pure functional languages?</p>\n\n<p>Note: </p>\n\n<ol>\n<li>Array order is not important in this case.</li>\n<li>Please don't take the example literally and suggest alternate solutions, I want a <strong>general</strong> solution for filtering and mapping lists fir multiple predicates.</li>\n</ol>\n","ClosedDate":null,"CommentCount":4,"CommunityOwnedDate":null,"CreationDate":"2015-10-08T11:25:24.110Z","FavoriteCount":0,"LastActivityDate":"2015-10-08T15:01:03.210Z","LastEditDate":null,"LastEditorDisplayName":null,"LastEditorUserId":0,"OwnerUserId":950039,"ParentId":0,"PostTypeId":1,"Score":0,"Tags":"<javascript><dictionary><filter><functional-programming><underscore.js>","Title":"Combine multiple filter() predicates in Underscore / Ramda / Functional languages / Libraries","ViewCount":79}, {"Id":22111619,"AcceptedAnswerId":0,"AnswerCount":2,"Body":"<p>I have an array...</p>\n\n<p>[8, 2, 5, 3, 0, 9, 1, 6, 7]</p>\n\n<p>How do I get the smallest number, not listed in the array? <code>4</code> in this case.</p>\n\n<p>The only thing I can think of is, but I would like to get rid of the while loop if I could.</p>\n\n<pre><code>var list = [8, 2, 5, 3, 9, 1, 6, 7];\nvar num = -1;\nvar done = false;\nwhile (!done) {\n  num++;\n  if(!_.contains(list, num)) {\n    done = true;\n  }\n}\n</code></pre>\n","ClosedDate":null,"CommentCount":5,"CommunityOwnedDate":null,"CreationDate":"2014-03-01T07:39:10.996Z","FavoriteCount":0,"LastActivityDate":"2014-03-01T08:10:08.463Z","LastEditDate":null,"LastEditorDisplayName":null,"LastEditorUserId":0,"OwnerUserId":308079,"ParentId":0,"PostTypeId":1,"Score":0,"Tags":"<javascript><functional-programming><lodash>","Title":"How can I get the smallest number, not in an array, in a functional programming fashion with lo-dash?","ViewCount":189}]